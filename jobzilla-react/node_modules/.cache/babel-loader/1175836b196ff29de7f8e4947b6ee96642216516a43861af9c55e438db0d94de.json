{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pradeep yadav\\\\Downloads\\\\jobzilla\\\\TF-jobzilla\\\\jobzilla-react\\\\src\\\\app\\\\pannels\\\\public-user\\\\sections\\\\candidates\\\\detail1\\\\section-can-about1.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ResumeDetails() {\n  _s();\n  const [profileSummary, setProfileSummary] = useState(''); // To store fetched profile summary data\n  const [loading, setLoading] = useState(true); // To show loading state while data is fetching\n  const [error, setError] = useState(null); // To handle errors\n  const {\n    resumeId\n  } = useParams(); // Get resumeId from URL\n\n  useEffect(() => {\n    const fetchProfileSummary = async () => {\n      try {\n        const response = await fetch(`http://localhost:8080/resume/${resumeId}`); // API call with resumeId\n        if (!response.ok) {\n          throw new Error('Failed to fetch resume data');\n        }\n        const data = await response.json();\n        // Assuming the profile summary is in a field called 'profileSummary'\n        setProfileSummary(data.profileSummary || ''); // Set profile summary\n      } catch (err) {\n        setError(err.message); // Set error message\n      } finally {\n        setLoading(false); // Data fetch completed (either success or failure)\n      }\n    };\n\n    fetchProfileSummary();\n  }, [resumeId]); // Re-run if resumeId changes\n\n  // Handle loading state\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Handle error state\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Render the fetched profile summary\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"twm-s-title\",\n      children: \"Profile Summary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: profileSummary || 'No profile summary available.'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n_s(ResumeDetails, \"cIdNucZgBV4R/pP0Wpp+5nQHDoM=\", false, function () {\n  return [useParams];\n});\n_c = ResumeDetails;\nexport default ResumeDetails;\nvar _c;\n$RefreshReg$(_c, \"ResumeDetails\");","map":{"version":3,"names":["React","useState","useEffect","useParams","jsxDEV","_jsxDEV","ResumeDetails","_s","profileSummary","setProfileSummary","loading","setLoading","error","setError","resumeId","fetchProfileSummary","response","fetch","ok","Error","data","json","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["C:/Users/Pradeep yadav/Downloads/jobzilla/TF-jobzilla/jobzilla-react/src/app/pannels/public-user/sections/candidates/detail1/section-can-about1.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nfunction ResumeDetails() {\n    const [profileSummary, setProfileSummary] = useState(''); // To store fetched profile summary data\n    const [loading, setLoading] = useState(true); // To show loading state while data is fetching\n    const [error, setError] = useState(null); // To handle errors\n    const { resumeId } = useParams(); // Get resumeId from URL\n\n    useEffect(() => {\n        const fetchProfileSummary = async () => {\n            try {\n                const response = await fetch(`http://localhost:8080/resume/${resumeId}`); // API call with resumeId\n                if (!response.ok) {\n                    throw new Error('Failed to fetch resume data');\n                }\n                const data = await response.json();\n                // Assuming the profile summary is in a field called 'profileSummary'\n                setProfileSummary(data.profileSummary || ''); // Set profile summary\n            } catch (err) {\n                setError(err.message); // Set error message\n            } finally {\n                setLoading(false); // Data fetch completed (either success or failure)\n            }\n        };\n\n        fetchProfileSummary();\n    }, [resumeId]); // Re-run if resumeId changes\n\n    // Handle loading state\n    if (loading) {\n        return <p>Loading...</p>;\n    }\n\n    // Handle error state\n    if (error) {\n        return <p>Error: {error}</p>;\n    }\n\n    // Render the fetched profile summary\n    return (\n        <div>\n            <h4 className=\"twm-s-title\">Profile Summary</h4>\n            <p>{profileSummary || 'No profile summary available.'}</p>\n        </div>\n    );\n}\n\nexport default ResumeDetails;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC1C,MAAM;IAAEa;EAAS,CAAC,GAAGX,SAAS,CAAC,CAAC,CAAC,CAAC;;EAElCD,SAAS,CAAC,MAAM;IACZ,MAAMa,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACpC,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,gCAA+BH,QAAS,EAAC,CAAC,CAAC,CAAC;QAC1E,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAClD;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClC;QACAZ,iBAAiB,CAACW,IAAI,CAACZ,cAAc,IAAI,EAAE,CAAC,CAAC,CAAC;MAClD,CAAC,CAAC,OAAOc,GAAG,EAAE;QACVT,QAAQ,CAACS,GAAG,CAACC,OAAO,CAAC,CAAC,CAAC;MAC3B,CAAC,SAAS;QACNZ,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACvB;IACJ,CAAC;;IAEDI,mBAAmB,CAAC,CAAC;EACzB,CAAC,EAAE,CAACD,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhB;EACA,IAAIJ,OAAO,EAAE;IACT,oBAAOL,OAAA;MAAAmB,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAC5B;;EAEA;EACA,IAAIhB,KAAK,EAAE;IACP,oBAAOP,OAAA;MAAAmB,QAAA,GAAG,SAAO,EAACZ,KAAK;IAAA;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAChC;;EAEA;EACA,oBACIvB,OAAA;IAAAmB,QAAA,gBACInB,OAAA;MAAIwB,SAAS,EAAC,aAAa;MAAAL,QAAA,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChDvB,OAAA;MAAAmB,QAAA,EAAIhB,cAAc,IAAI;IAA+B;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzD,CAAC;AAEd;AAACrB,EAAA,CA3CQD,aAAa;EAAA,QAIGH,SAAS;AAAA;AAAA2B,EAAA,GAJzBxB,aAAa;AA6CtB,eAAeA,aAAa;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}