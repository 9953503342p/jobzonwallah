{"ast":null,"code":"import equal from 'fast-deep-equal';\nimport SuperCluster from 'supercluster';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nfunction __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\n/**\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * util class that creates a common set of convenience functions to wrap\n * shared behavior of Advanced Markers and Markers.\n */\nclass MarkerUtils {\n  static isAdvancedMarkerAvailable(map) {\n    return google.maps.marker && map.getMapCapabilities().isAdvancedMarkersAvailable === true;\n  }\n  static isAdvancedMarker(marker) {\n    return google.maps.marker && marker instanceof google.maps.marker.AdvancedMarkerElement;\n  }\n  static setMap(marker, map) {\n    if (this.isAdvancedMarker(marker)) {\n      marker.map = map;\n    } else {\n      marker.setMap(map);\n    }\n  }\n  static getPosition(marker) {\n    // SuperClusterAlgorithm.calculate expects a LatLng instance so we fake it for Adv Markers\n    if (this.isAdvancedMarker(marker)) {\n      if (marker.position) {\n        if (marker.position instanceof google.maps.LatLng) {\n          return marker.position;\n        }\n        // since we can't cast to LatLngLiteral for reasons =(\n        if (marker.position.lat && marker.position.lng) {\n          return new google.maps.LatLng(marker.position.lat, marker.position.lng);\n        }\n      }\n      return new google.maps.LatLng(null);\n    }\n    return marker.getPosition();\n  }\n  static getVisible(marker) {\n    if (this.isAdvancedMarker(marker)) {\n      /**\n       * Always return true for Advanced Markers because the clusterer\n       * uses getVisible as a way to count legacy markers not as an actual\n       * indicator of visibility for some reason. Even when markers are hidden\n       * Marker.getVisible returns `true` and this is used to set the marker count\n       * on the cluster. See the behavior of Cluster.count\n       */\n      return true;\n    }\n    return marker.getVisible();\n  }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Cluster {\n  constructor(_ref) {\n    let {\n      markers,\n      position\n    } = _ref;\n    this.markers = markers;\n    if (position) {\n      if (position instanceof google.maps.LatLng) {\n        this._position = position;\n      } else {\n        this._position = new google.maps.LatLng(position);\n      }\n    }\n  }\n  get bounds() {\n    if (this.markers.length === 0 && !this._position) {\n      return;\n    }\n    const bounds = new google.maps.LatLngBounds(this._position, this._position);\n    for (const marker of this.markers) {\n      bounds.extend(MarkerUtils.getPosition(marker));\n    }\n    return bounds;\n  }\n  get position() {\n    return this._position || this.bounds.getCenter();\n  }\n  /**\n   * Get the count of **visible** markers.\n   */\n  get count() {\n    return this.markers.filter(m => MarkerUtils.getVisible(m)).length;\n  }\n  /**\n   * Add a marker to the cluster.\n   */\n  push(marker) {\n    this.markers.push(marker);\n  }\n  /**\n   * Cleanup references and remove marker from map.\n   */\n  delete() {\n    if (this.marker) {\n      MarkerUtils.setMap(this.marker, null);\n      this.marker = undefined;\n    }\n    this.markers.length = 0;\n  }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns the markers visible in a padded map viewport\n *\n * @param map\n * @param mapCanvasProjection\n * @param markers The list of marker to filter\n * @param viewportPaddingPixels The padding in pixel\n * @returns The list of markers in the padded viewport\n */\nconst filterMarkersToPaddedViewport = (map, mapCanvasProjection, markers, viewportPaddingPixels) => {\n  const extendedMapBounds = extendBoundsToPaddedViewport(map.getBounds(), mapCanvasProjection, viewportPaddingPixels);\n  return markers.filter(marker => extendedMapBounds.contains(MarkerUtils.getPosition(marker)));\n};\n/**\n * Extends a bounds by a number of pixels in each direction\n */\nconst extendBoundsToPaddedViewport = (bounds, projection, numPixels) => {\n  const {\n    northEast,\n    southWest\n  } = latLngBoundsToPixelBounds(bounds, projection);\n  const extendedPixelBounds = extendPixelBounds({\n    northEast,\n    southWest\n  }, numPixels);\n  return pixelBoundsToLatLngBounds(extendedPixelBounds, projection);\n};\n/**\n * Gets the extended bounds as a bbox [westLng, southLat, eastLng, northLat]\n */\nconst getPaddedViewport = (bounds, projection, pixels) => {\n  const extended = extendBoundsToPaddedViewport(bounds, projection, pixels);\n  const ne = extended.getNorthEast();\n  const sw = extended.getSouthWest();\n  return [sw.lng(), sw.lat(), ne.lng(), ne.lat()];\n};\n/**\n * Returns the distance between 2 positions.\n *\n * @hidden\n */\nconst distanceBetweenPoints = (p1, p2) => {\n  const R = 6371; // Radius of the Earth in km\n  const dLat = (p2.lat - p1.lat) * Math.PI / 180;\n  const dLon = (p2.lng - p1.lng) * Math.PI / 180;\n  const sinDLat = Math.sin(dLat / 2);\n  const sinDLon = Math.sin(dLon / 2);\n  const a = sinDLat * sinDLat + Math.cos(p1.lat * Math.PI / 180) * Math.cos(p2.lat * Math.PI / 180) * sinDLon * sinDLon;\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n};\n/**\n * Converts a LatLng bound to pixels.\n *\n * @hidden\n */\nconst latLngBoundsToPixelBounds = (bounds, projection) => {\n  return {\n    northEast: projection.fromLatLngToDivPixel(bounds.getNorthEast()),\n    southWest: projection.fromLatLngToDivPixel(bounds.getSouthWest())\n  };\n};\n/**\n * Extends a pixel bounds by numPixels in all directions.\n *\n * @hidden\n */\nconst extendPixelBounds = (_ref2, numPixels) => {\n  let {\n    northEast,\n    southWest\n  } = _ref2;\n  northEast.x += numPixels;\n  northEast.y -= numPixels;\n  southWest.x -= numPixels;\n  southWest.y += numPixels;\n  return {\n    northEast,\n    southWest\n  };\n};\n/**\n * @hidden\n */\nconst pixelBoundsToLatLngBounds = (_ref3, projection) => {\n  let {\n    northEast,\n    southWest\n  } = _ref3;\n  const sw = projection.fromDivPixelToLatLng(southWest);\n  const ne = projection.fromDivPixelToLatLng(northEast);\n  return new google.maps.LatLngBounds(sw, ne);\n};\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @hidden\n */\nclass AbstractAlgorithm {\n  constructor(_ref4) {\n    let {\n      maxZoom = 16\n    } = _ref4;\n    this.maxZoom = maxZoom;\n  }\n  /**\n   * Helper function to bypass clustering based upon some map state such as\n   * zoom, number of markers, etc.\n   *\n   * ```typescript\n   *  cluster({markers, map}: AlgorithmInput): Cluster[] {\n   *    if (shouldBypassClustering(map)) {\n   *      return this.noop({markers})\n   *    }\n   * }\n   * ```\n   */\n  noop(_ref5) {\n    let {\n      markers\n    } = _ref5;\n    return noop(markers);\n  }\n}\n/**\n * Abstract viewport algorithm proves a class to filter markers by a padded\n * viewport. This is a common optimization.\n *\n * @hidden\n */\nclass AbstractViewportAlgorithm extends AbstractAlgorithm {\n  constructor(_a) {\n    var {\n        viewportPadding = 60\n      } = _a,\n      options = __rest(_a, [\"viewportPadding\"]);\n    super(options);\n    this.viewportPadding = 60;\n    this.viewportPadding = viewportPadding;\n  }\n  calculate(_ref6) {\n    let {\n      markers,\n      map,\n      mapCanvasProjection\n    } = _ref6;\n    if (map.getZoom() >= this.maxZoom) {\n      return {\n        clusters: this.noop({\n          markers\n        }),\n        changed: false\n      };\n    }\n    return {\n      clusters: this.cluster({\n        markers: filterMarkersToPaddedViewport(map, mapCanvasProjection, markers, this.viewportPadding),\n        map,\n        mapCanvasProjection\n      })\n    };\n  }\n}\n/**\n * @hidden\n */\nconst noop = markers => {\n  const clusters = markers.map(marker => new Cluster({\n    position: MarkerUtils.getPosition(marker),\n    markers: [marker]\n  }));\n  return clusters;\n};\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The default Grid algorithm historically used in Google Maps marker\n * clustering.\n *\n * The Grid algorithm does not implement caching and markers may flash as the\n * viewport changes. Instead use {@link SuperClusterAlgorithm}.\n */\nclass GridAlgorithm extends AbstractViewportAlgorithm {\n  constructor(_a) {\n    var {\n        maxDistance = 40000,\n        gridSize = 40\n      } = _a,\n      options = __rest(_a, [\"maxDistance\", \"gridSize\"]);\n    super(options);\n    this.clusters = [];\n    this.state = {\n      zoom: -1\n    };\n    this.maxDistance = maxDistance;\n    this.gridSize = gridSize;\n  }\n  calculate(_ref7) {\n    let {\n      markers,\n      map,\n      mapCanvasProjection\n    } = _ref7;\n    const state = {\n      zoom: map.getZoom()\n    };\n    let changed = false;\n    if (this.state.zoom >= this.maxZoom && state.zoom >= this.maxZoom) ;else {\n      changed = !equal(this.state, state);\n    }\n    this.state = state;\n    if (map.getZoom() >= this.maxZoom) {\n      return {\n        clusters: this.noop({\n          markers\n        }),\n        changed\n      };\n    }\n    return {\n      clusters: this.cluster({\n        markers: filterMarkersToPaddedViewport(map, mapCanvasProjection, markers, this.viewportPadding),\n        map,\n        mapCanvasProjection\n      })\n    };\n  }\n  cluster(_ref8) {\n    let {\n      markers,\n      map,\n      mapCanvasProjection\n    } = _ref8;\n    this.clusters = [];\n    markers.forEach(marker => {\n      this.addToClosestCluster(marker, map, mapCanvasProjection);\n    });\n    return this.clusters;\n  }\n  addToClosestCluster(marker, map, projection) {\n    let maxDistance = this.maxDistance; // Some large number\n    let cluster = null;\n    for (let i = 0; i < this.clusters.length; i++) {\n      const candidate = this.clusters[i];\n      const distance = distanceBetweenPoints(candidate.bounds.getCenter().toJSON(), MarkerUtils.getPosition(marker).toJSON());\n      if (distance < maxDistance) {\n        maxDistance = distance;\n        cluster = candidate;\n      }\n    }\n    if (cluster && extendBoundsToPaddedViewport(cluster.bounds, projection, this.gridSize).contains(MarkerUtils.getPosition(marker))) {\n      cluster.push(marker);\n    } else {\n      const cluster = new Cluster({\n        markers: [marker]\n      });\n      this.clusters.push(cluster);\n    }\n  }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Noop algorithm does not generate any clusters or filter markers by the an extended viewport.\n */\nclass NoopAlgorithm extends AbstractAlgorithm {\n  constructor(_a) {\n    var options = __rest(_a, []);\n    super(options);\n  }\n  calculate(_ref9) {\n    let {\n      markers,\n      map,\n      mapCanvasProjection\n    } = _ref9;\n    return {\n      clusters: this.cluster({\n        markers,\n        map,\n        mapCanvasProjection\n      }),\n      changed: false\n    };\n  }\n  cluster(input) {\n    return this.noop(input);\n  }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A very fast JavaScript algorithm for geospatial point clustering using KD trees.\n *\n * @see https://www.npmjs.com/package/supercluster for more information on options.\n */\nclass SuperClusterAlgorithm extends AbstractAlgorithm {\n  constructor(_a) {\n    var {\n        maxZoom,\n        radius = 60\n      } = _a,\n      options = __rest(_a, [\"maxZoom\", \"radius\"]);\n    super({\n      maxZoom\n    });\n    this.state = {\n      zoom: -1\n    };\n    this.superCluster = new SuperCluster(Object.assign({\n      maxZoom: this.maxZoom,\n      radius\n    }, options));\n  }\n  calculate(input) {\n    let changed = false;\n    const state = {\n      zoom: input.map.getZoom()\n    };\n    if (!equal(input.markers, this.markers)) {\n      changed = true;\n      // TODO use proxy to avoid copy?\n      this.markers = [...input.markers];\n      const points = this.markers.map(marker => {\n        const position = MarkerUtils.getPosition(marker);\n        const coordinates = [position.lng(), position.lat()];\n        return {\n          type: \"Feature\",\n          geometry: {\n            type: \"Point\",\n            coordinates\n          },\n          properties: {\n            marker\n          }\n        };\n      });\n      this.superCluster.load(points);\n    }\n    if (!changed) {\n      if (this.state.zoom <= this.maxZoom || state.zoom <= this.maxZoom) {\n        changed = !equal(this.state, state);\n      }\n    }\n    this.state = state;\n    if (changed) {\n      this.clusters = this.cluster(input);\n    }\n    return {\n      clusters: this.clusters,\n      changed\n    };\n  }\n  cluster(_ref10) {\n    let {\n      map\n    } = _ref10;\n    return this.superCluster.getClusters([-180, -90, 180, 90], Math.round(map.getZoom())).map(feature => this.transformCluster(feature));\n  }\n  transformCluster(_ref11) {\n    let {\n      geometry: {\n        coordinates: [lng, lat]\n      },\n      properties\n    } = _ref11;\n    if (properties.cluster) {\n      return new Cluster({\n        markers: this.superCluster.getLeaves(properties.cluster_id, Infinity).map(leaf => leaf.properties.marker),\n        position: {\n          lat,\n          lng\n        }\n      });\n    }\n    const marker = properties.marker;\n    return new Cluster({\n      markers: [marker],\n      position: MarkerUtils.getPosition(marker)\n    });\n  }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A very fast JavaScript algorithm for geospatial point clustering using KD trees.\n *\n * @see https://www.npmjs.com/package/supercluster for more information on options.\n */\nclass SuperClusterViewportAlgorithm extends AbstractViewportAlgorithm {\n  constructor(_a) {\n    var {\n        maxZoom,\n        radius = 60,\n        viewportPadding = 60\n      } = _a,\n      options = __rest(_a, [\"maxZoom\", \"radius\", \"viewportPadding\"]);\n    super({\n      maxZoom,\n      viewportPadding\n    });\n    this.superCluster = new SuperCluster(Object.assign({\n      maxZoom: this.maxZoom,\n      radius\n    }, options));\n    this.state = {\n      zoom: -1,\n      view: [0, 0, 0, 0]\n    };\n  }\n  calculate(input) {\n    const state = {\n      zoom: Math.round(input.map.getZoom()),\n      view: getPaddedViewport(input.map.getBounds(), input.mapCanvasProjection, this.viewportPadding)\n    };\n    let changed = !equal(this.state, state);\n    if (!equal(input.markers, this.markers)) {\n      changed = true;\n      // TODO use proxy to avoid copy?\n      this.markers = [...input.markers];\n      const points = this.markers.map(marker => {\n        const position = MarkerUtils.getPosition(marker);\n        const coordinates = [position.lng(), position.lat()];\n        return {\n          type: \"Feature\",\n          geometry: {\n            type: \"Point\",\n            coordinates\n          },\n          properties: {\n            marker\n          }\n        };\n      });\n      this.superCluster.load(points);\n    }\n    if (changed) {\n      this.clusters = this.cluster(input);\n      this.state = state;\n    }\n    return {\n      clusters: this.clusters,\n      changed\n    };\n  }\n  cluster(_ref12) {\n    let {\n      map,\n      mapCanvasProjection\n    } = _ref12;\n    /* recalculate new state because we can't use the cached version. */\n    const state = {\n      zoom: Math.round(map.getZoom()),\n      view: getPaddedViewport(map.getBounds(), mapCanvasProjection, this.viewportPadding)\n    };\n    return this.superCluster.getClusters(state.view, state.zoom).map(feature => this.transformCluster(feature));\n  }\n  transformCluster(_ref13) {\n    let {\n      geometry: {\n        coordinates: [lng, lat]\n      },\n      properties\n    } = _ref13;\n    if (properties.cluster) {\n      return new Cluster({\n        markers: this.superCluster.getLeaves(properties.cluster_id, Infinity).map(leaf => leaf.properties.marker),\n        position: {\n          lat,\n          lng\n        }\n      });\n    }\n    const marker = properties.marker;\n    return new Cluster({\n      markers: [marker],\n      position: MarkerUtils.getPosition(marker)\n    });\n  }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provides statistics on all clusters in the current render cycle for use in {@link Renderer.render}.\n */\nclass ClusterStats {\n  constructor(markers, clusters) {\n    this.markers = {\n      sum: markers.length\n    };\n    const clusterMarkerCounts = clusters.map(a => a.count);\n    const clusterMarkerSum = clusterMarkerCounts.reduce((a, b) => a + b, 0);\n    this.clusters = {\n      count: clusters.length,\n      markers: {\n        mean: clusterMarkerSum / clusters.length,\n        sum: clusterMarkerSum,\n        min: Math.min(...clusterMarkerCounts),\n        max: Math.max(...clusterMarkerCounts)\n      }\n    };\n  }\n}\nclass DefaultRenderer {\n  /**\n   * The default render function for the library used by {@link MarkerClusterer}.\n   *\n   * Currently set to use the following:\n   *\n   * ```typescript\n   * // change color if this cluster has more markers than the mean cluster\n   * const color =\n   *   count > Math.max(10, stats.clusters.markers.mean)\n   *     ? \"#ff0000\"\n   *     : \"#0000ff\";\n   *\n   * // create svg url with fill color\n   * const svg = window.btoa(`\n   * <svg fill=\"${color}\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 240 240\">\n   *   <circle cx=\"120\" cy=\"120\" opacity=\".6\" r=\"70\" />\n   *   <circle cx=\"120\" cy=\"120\" opacity=\".3\" r=\"90\" />\n   *   <circle cx=\"120\" cy=\"120\" opacity=\".2\" r=\"110\" />\n   *   <circle cx=\"120\" cy=\"120\" opacity=\".1\" r=\"130\" />\n   * </svg>`);\n   *\n   * // create marker using svg icon\n   * return new google.maps.Marker({\n   *   position,\n   *   icon: {\n   *     url: `data:image/svg+xml;base64,${svg}`,\n   *     scaledSize: new google.maps.Size(45, 45),\n   *   },\n   *   label: {\n   *     text: String(count),\n   *     color: \"rgba(255,255,255,0.9)\",\n   *     fontSize: \"12px\",\n   *   },\n   *   // adjust zIndex to be above other markers\n   *   zIndex: 1000 + count,\n   * });\n   * ```\n   */\n  render(_ref14, stats, map) {\n    let {\n      count,\n      position\n    } = _ref14;\n    // change color if this cluster has more markers than the mean cluster\n    const color = count > Math.max(10, stats.clusters.markers.mean) ? \"#ff0000\" : \"#0000ff\";\n    // create svg literal with fill color\n    const svg = `<svg fill=\"${color}\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 240 240\" width=\"50\" height=\"50\">\n<circle cx=\"120\" cy=\"120\" opacity=\".6\" r=\"70\" />\n<circle cx=\"120\" cy=\"120\" opacity=\".3\" r=\"90\" />\n<circle cx=\"120\" cy=\"120\" opacity=\".2\" r=\"110\" />\n<text x=\"50%\" y=\"50%\" style=\"fill:#fff\" text-anchor=\"middle\" font-size=\"50\" dominant-baseline=\"middle\" font-family=\"roboto,arial,sans-serif\">${count}</text>\n</svg>`;\n    const title = `Cluster of ${count} markers`,\n      // adjust zIndex to be above other markers\n      zIndex = Number(google.maps.Marker.MAX_ZINDEX) + count;\n    if (MarkerUtils.isAdvancedMarkerAvailable(map)) {\n      // create cluster SVG element\n      const parser = new DOMParser();\n      const svgEl = parser.parseFromString(svg, \"image/svg+xml\").documentElement;\n      svgEl.setAttribute(\"transform\", \"translate(0 25)\");\n      const clusterOptions = {\n        map,\n        position,\n        zIndex,\n        title,\n        content: svgEl\n      };\n      return new google.maps.marker.AdvancedMarkerElement(clusterOptions);\n    }\n    const clusterOptions = {\n      position,\n      zIndex,\n      title,\n      icon: {\n        url: `data:image/svg+xml;base64,${btoa(svg)}`,\n        anchor: new google.maps.Point(25, 25)\n      }\n    };\n    return new google.maps.Marker(clusterOptions);\n  }\n}\n\n/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Extends an object's prototype by another's.\n *\n * @param type1 The Type to be extended.\n * @param type2 The Type to extend with.\n * @ignore\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction extend(type1, type2) {\n  /* istanbul ignore next */\n  // eslint-disable-next-line prefer-const\n  for (let property in type2.prototype) {\n    type1.prototype[property] = type2.prototype[property];\n  }\n}\n/**\n * @ignore\n */\nclass OverlayViewSafe {\n  constructor() {\n    // MarkerClusterer implements google.maps.OverlayView interface. We use the\n    // extend function to extend MarkerClusterer with google.maps.OverlayView\n    // because it might not always be available when the code is defined so we\n    // look for it at the last possible moment. If it doesn't exist now then\n    // there is no point going ahead :)\n    extend(OverlayViewSafe, google.maps.OverlayView);\n  }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar MarkerClustererEvents;\n(function (MarkerClustererEvents) {\n  MarkerClustererEvents[\"CLUSTERING_BEGIN\"] = \"clusteringbegin\";\n  MarkerClustererEvents[\"CLUSTERING_END\"] = \"clusteringend\";\n  MarkerClustererEvents[\"CLUSTER_CLICK\"] = \"click\";\n})(MarkerClustererEvents || (MarkerClustererEvents = {}));\nconst defaultOnClusterClickHandler = (_, cluster, map) => {\n  map.fitBounds(cluster.bounds);\n};\n/**\n * MarkerClusterer creates and manages per-zoom-level clusters for large amounts\n * of markers. See {@link MarkerClustererOptions} for more details.\n *\n */\nclass MarkerClusterer extends OverlayViewSafe {\n  constructor(_ref15) {\n    let {\n      map,\n      markers = [],\n      algorithmOptions = {},\n      algorithm = new SuperClusterAlgorithm(algorithmOptions),\n      renderer = new DefaultRenderer(),\n      onClusterClick = defaultOnClusterClickHandler\n    } = _ref15;\n    super();\n    this.markers = [...markers];\n    this.clusters = [];\n    this.algorithm = algorithm;\n    this.renderer = renderer;\n    this.onClusterClick = onClusterClick;\n    if (map) {\n      this.setMap(map);\n    }\n  }\n  addMarker(marker, noDraw) {\n    if (this.markers.includes(marker)) {\n      return;\n    }\n    this.markers.push(marker);\n    if (!noDraw) {\n      this.render();\n    }\n  }\n  addMarkers(markers, noDraw) {\n    markers.forEach(marker => {\n      this.addMarker(marker, true);\n    });\n    if (!noDraw) {\n      this.render();\n    }\n  }\n  removeMarker(marker, noDraw) {\n    const index = this.markers.indexOf(marker);\n    if (index === -1) {\n      // Marker is not in our list of markers, so do nothing:\n      return false;\n    }\n    MarkerUtils.setMap(marker, null);\n    this.markers.splice(index, 1); // Remove the marker from the list of managed markers\n    if (!noDraw) {\n      this.render();\n    }\n    return true;\n  }\n  removeMarkers(markers, noDraw) {\n    let removed = false;\n    markers.forEach(marker => {\n      removed = this.removeMarker(marker, true) || removed;\n    });\n    if (removed && !noDraw) {\n      this.render();\n    }\n    return removed;\n  }\n  clearMarkers(noDraw) {\n    this.markers.length = 0;\n    if (!noDraw) {\n      this.render();\n    }\n  }\n  /**\n   * Recalculates and draws all the marker clusters.\n   */\n  render() {\n    const map = this.getMap();\n    if (map instanceof google.maps.Map && map.getProjection()) {\n      google.maps.event.trigger(this, MarkerClustererEvents.CLUSTERING_BEGIN, this);\n      const {\n        clusters,\n        changed\n      } = this.algorithm.calculate({\n        markers: this.markers,\n        map,\n        mapCanvasProjection: this.getProjection()\n      });\n      // Allow algorithms to return flag on whether the clusters/markers have changed.\n      if (changed || changed == undefined) {\n        // Accumulate the markers of the clusters composed of a single marker.\n        // Those clusters directly use the marker.\n        // Clusters with more than one markers use a group marker generated by a renderer.\n        const singleMarker = new Set();\n        for (const cluster of clusters) {\n          if (cluster.markers.length == 1) {\n            singleMarker.add(cluster.markers[0]);\n          }\n        }\n        const groupMarkers = [];\n        // Iterate the clusters that are currently rendered.\n        for (const cluster of this.clusters) {\n          if (cluster.marker == null) {\n            continue;\n          }\n          if (cluster.markers.length == 1) {\n            if (!singleMarker.has(cluster.marker)) {\n              // The marker:\n              // - was previously rendered because it is from a cluster with 1 marker,\n              // - should no more be rendered as it is not in singleMarker.\n              MarkerUtils.setMap(cluster.marker, null);\n            }\n          } else {\n            // Delay the removal of old group markers to avoid flickering.\n            groupMarkers.push(cluster.marker);\n          }\n        }\n        this.clusters = clusters;\n        this.renderClusters();\n        // Delayed removal of the markers of the former groups.\n        requestAnimationFrame(() => groupMarkers.forEach(marker => MarkerUtils.setMap(marker, null)));\n      }\n      google.maps.event.trigger(this, MarkerClustererEvents.CLUSTERING_END, this);\n    }\n  }\n  onAdd() {\n    this.idleListener = this.getMap().addListener(\"idle\", this.render.bind(this));\n    this.render();\n  }\n  onRemove() {\n    google.maps.event.removeListener(this.idleListener);\n    this.reset();\n  }\n  reset() {\n    this.markers.forEach(marker => MarkerUtils.setMap(marker, null));\n    this.clusters.forEach(cluster => cluster.delete());\n    this.clusters = [];\n  }\n  renderClusters() {\n    // Generate stats to pass to renderers.\n    const stats = new ClusterStats(this.markers, this.clusters);\n    const map = this.getMap();\n    this.clusters.forEach(cluster => {\n      if (cluster.markers.length === 1) {\n        cluster.marker = cluster.markers[0];\n      } else {\n        // Generate the marker to represent the group.\n        cluster.marker = this.renderer.render(cluster, stats, map);\n        // Make sure all individual markers are removed from the map.\n        cluster.markers.forEach(marker => MarkerUtils.setMap(marker, null));\n        if (this.onClusterClick) {\n          cluster.marker.addListener(\"click\", /* istanbul ignore next */\n          event => {\n            google.maps.event.trigger(this, MarkerClustererEvents.CLUSTER_CLICK, cluster);\n            this.onClusterClick(event, cluster, map);\n          });\n        }\n      }\n      MarkerUtils.setMap(cluster.marker, map);\n    });\n  }\n}\nexport { AbstractAlgorithm, AbstractViewportAlgorithm, Cluster, ClusterStats, DefaultRenderer, GridAlgorithm, MarkerClusterer, MarkerClustererEvents, MarkerUtils, NoopAlgorithm, SuperClusterAlgorithm, SuperClusterViewportAlgorithm, defaultOnClusterClickHandler, distanceBetweenPoints, extendBoundsToPaddedViewport, extendPixelBounds, filterMarkersToPaddedViewport, getPaddedViewport, noop, pixelBoundsToLatLngBounds };","map":{"version":3,"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","MarkerUtils","isAdvancedMarkerAvailable","map","google","maps","marker","getMapCapabilities","isAdvancedMarkersAvailable","isAdvancedMarker","AdvancedMarkerElement","setMap","getPosition","position","LatLng","lat","lng","getVisible","Cluster","constructor","_ref","markers","_position","bounds","LatLngBounds","extend","getCenter","count","filter","m","push","delete","undefined","filterMarkersToPaddedViewport","mapCanvasProjection","viewportPaddingPixels","extendedMapBounds","extendBoundsToPaddedViewport","getBounds","contains","projection","numPixels","northEast","southWest","latLngBoundsToPixelBounds","extendedPixelBounds","extendPixelBounds","pixelBoundsToLatLngBounds","getPaddedViewport","pixels","extended","ne","getNorthEast","sw","getSouthWest","distanceBetweenPoints","p1","p2","R","dLat","Math","PI","dLon","sinDLat","sin","sinDLon","a","cos","c","atan2","sqrt","fromLatLngToDivPixel","_ref2","x","y","_ref3","fromDivPixelToLatLng","AbstractAlgorithm","_ref4","maxZoom","noop","_ref5","AbstractViewportAlgorithm","_a","viewportPadding","options","calculate","_ref6","getZoom","clusters","changed","cluster","GridAlgorithm","maxDistance","gridSize","state","zoom","_ref7","equal","_ref8","forEach","addToClosestCluster","candidate","distance","toJSON","NoopAlgorithm","_ref9","input","SuperClusterAlgorithm","radius","superCluster","SuperCluster","assign","points","coordinates","type","geometry","properties","load","_ref10","getClusters","round","feature","transformCluster","_ref11","getLeaves","cluster_id","Infinity","leaf","SuperClusterViewportAlgorithm","view","_ref12","_ref13","ClusterStats","sum","clusterMarkerCounts","clusterMarkerSum","reduce","b","mean","min","max","DefaultRenderer","render","_ref14","stats","color","svg","title","zIndex","Number","Marker","MAX_ZINDEX","parser","DOMParser","svgEl","parseFromString","documentElement","setAttribute","clusterOptions","content","icon","url","btoa","anchor","Point","type1","type2","property","OverlayViewSafe","OverlayView","MarkerClustererEvents","defaultOnClusterClickHandler","_","fitBounds","MarkerClusterer","_ref15","algorithmOptions","algorithm","renderer","onClusterClick","addMarker","noDraw","includes","addMarkers","removeMarker","index","splice","removeMarkers","removed","clearMarkers","getMap","Map","getProjection","event","trigger","CLUSTERING_BEGIN","singleMarker","Set","add","groupMarkers","has","renderClusters","requestAnimationFrame","CLUSTERING_END","onAdd","idleListener","addListener","bind","onRemove","removeListener","reset","CLUSTER_CLICK"],"sources":["C:\\Users\\Pradeep yadav\\Downloads\\jobzilla\\TF-jobzilla\\jobzilla-react\\node_modules\\@googlemaps\\markerclusterer\\node_modules\\tslib\\tslib.es6.js","C:\\Users\\Pradeep yadav\\Downloads\\jobzilla\\TF-jobzilla\\jobzilla-react\\node_modules\\@googlemaps\\markerclusterer\\src\\marker-utils.ts","C:\\Users\\Pradeep yadav\\Downloads\\jobzilla\\TF-jobzilla\\jobzilla-react\\node_modules\\@googlemaps\\markerclusterer\\src\\cluster.ts","C:\\Users\\Pradeep yadav\\Downloads\\jobzilla\\TF-jobzilla\\jobzilla-react\\node_modules\\@googlemaps\\markerclusterer\\src\\algorithms\\utils.ts","C:\\Users\\Pradeep yadav\\Downloads\\jobzilla\\TF-jobzilla\\jobzilla-react\\node_modules\\@googlemaps\\markerclusterer\\src\\algorithms\\core.ts","C:\\Users\\Pradeep yadav\\Downloads\\jobzilla\\TF-jobzilla\\jobzilla-react\\node_modules\\@googlemaps\\markerclusterer\\src\\algorithms\\grid.ts","C:\\Users\\Pradeep yadav\\Downloads\\jobzilla\\TF-jobzilla\\jobzilla-react\\node_modules\\@googlemaps\\markerclusterer\\src\\algorithms\\noop.ts","C:\\Users\\Pradeep yadav\\Downloads\\jobzilla\\TF-jobzilla\\jobzilla-react\\node_modules\\@googlemaps\\markerclusterer\\src\\algorithms\\supercluster.ts","C:\\Users\\Pradeep yadav\\Downloads\\jobzilla\\TF-jobzilla\\jobzilla-react\\node_modules\\@googlemaps\\markerclusterer\\src\\algorithms\\superviewport.ts","C:\\Users\\Pradeep yadav\\Downloads\\jobzilla\\TF-jobzilla\\jobzilla-react\\node_modules\\@googlemaps\\markerclusterer\\src\\renderer.ts","C:\\Users\\Pradeep yadav\\Downloads\\jobzilla\\TF-jobzilla\\jobzilla-react\\node_modules\\@googlemaps\\markerclusterer\\src\\overlay-view-safe.ts","C:\\Users\\Pradeep yadav\\Downloads\\jobzilla\\TF-jobzilla\\jobzilla-react\\node_modules\\@googlemaps\\markerclusterer\\src\\markerclusterer.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * util class that creates a common set of convenience functions to wrap\n * shared behavior of Advanced Markers and Markers.\n */\nexport class MarkerUtils {\n    static isAdvancedMarkerAvailable(map) {\n        return (google.maps.marker &&\n            map.getMapCapabilities().isAdvancedMarkersAvailable === true);\n    }\n    static isAdvancedMarker(marker) {\n        return (google.maps.marker &&\n            marker instanceof google.maps.marker.AdvancedMarkerElement);\n    }\n    static setMap(marker, map) {\n        if (this.isAdvancedMarker(marker)) {\n            marker.map = map;\n        }\n        else {\n            marker.setMap(map);\n        }\n    }\n    static getPosition(marker) {\n        // SuperClusterAlgorithm.calculate expects a LatLng instance so we fake it for Adv Markers\n        if (this.isAdvancedMarker(marker)) {\n            if (marker.position) {\n                if (marker.position instanceof google.maps.LatLng) {\n                    return marker.position;\n                }\n                // since we can't cast to LatLngLiteral for reasons =(\n                if (marker.position.lat && marker.position.lng) {\n                    return new google.maps.LatLng(marker.position.lat, marker.position.lng);\n                }\n            }\n            return new google.maps.LatLng(null);\n        }\n        return marker.getPosition();\n    }\n    static getVisible(marker) {\n        if (this.isAdvancedMarker(marker)) {\n            /**\n             * Always return true for Advanced Markers because the clusterer\n             * uses getVisible as a way to count legacy markers not as an actual\n             * indicator of visibility for some reason. Even when markers are hidden\n             * Marker.getVisible returns `true` and this is used to set the marker count\n             * on the cluster. See the behavior of Cluster.count\n             */\n            return true;\n        }\n        return marker.getVisible();\n    }\n}\n//# sourceMappingURL=marker-utils.js.map","/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { MarkerUtils } from \"./marker-utils\";\nexport class Cluster {\n    constructor({ markers, position }) {\n        this.markers = markers;\n        if (position) {\n            if (position instanceof google.maps.LatLng) {\n                this._position = position;\n            }\n            else {\n                this._position = new google.maps.LatLng(position);\n            }\n        }\n    }\n    get bounds() {\n        if (this.markers.length === 0 && !this._position) {\n            return;\n        }\n        const bounds = new google.maps.LatLngBounds(this._position, this._position);\n        for (const marker of this.markers) {\n            bounds.extend(MarkerUtils.getPosition(marker));\n        }\n        return bounds;\n    }\n    get position() {\n        return this._position || this.bounds.getCenter();\n    }\n    /**\n     * Get the count of **visible** markers.\n     */\n    get count() {\n        return this.markers.filter((m) => MarkerUtils.getVisible(m)).length;\n    }\n    /**\n     * Add a marker to the cluster.\n     */\n    push(marker) {\n        this.markers.push(marker);\n    }\n    /**\n     * Cleanup references and remove marker from map.\n     */\n    delete() {\n        if (this.marker) {\n            MarkerUtils.setMap(this.marker, null);\n            this.marker = undefined;\n        }\n        this.markers.length = 0;\n    }\n}\n//# sourceMappingURL=cluster.js.map","/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { MarkerUtils } from \"../marker-utils\";\n/**\n * Returns the markers visible in a padded map viewport\n *\n * @param map\n * @param mapCanvasProjection\n * @param markers The list of marker to filter\n * @param viewportPaddingPixels The padding in pixel\n * @returns The list of markers in the padded viewport\n */\nexport const filterMarkersToPaddedViewport = (map, mapCanvasProjection, markers, viewportPaddingPixels) => {\n    const extendedMapBounds = extendBoundsToPaddedViewport(map.getBounds(), mapCanvasProjection, viewportPaddingPixels);\n    return markers.filter((marker) => extendedMapBounds.contains(MarkerUtils.getPosition(marker)));\n};\n/**\n * Extends a bounds by a number of pixels in each direction\n */\nexport const extendBoundsToPaddedViewport = (bounds, projection, numPixels) => {\n    const { northEast, southWest } = latLngBoundsToPixelBounds(bounds, projection);\n    const extendedPixelBounds = extendPixelBounds({ northEast, southWest }, numPixels);\n    return pixelBoundsToLatLngBounds(extendedPixelBounds, projection);\n};\n/**\n * Gets the extended bounds as a bbox [westLng, southLat, eastLng, northLat]\n */\nexport const getPaddedViewport = (bounds, projection, pixels) => {\n    const extended = extendBoundsToPaddedViewport(bounds, projection, pixels);\n    const ne = extended.getNorthEast();\n    const sw = extended.getSouthWest();\n    return [sw.lng(), sw.lat(), ne.lng(), ne.lat()];\n};\n/**\n * Returns the distance between 2 positions.\n *\n * @hidden\n */\nexport const distanceBetweenPoints = (p1, p2) => {\n    const R = 6371; // Radius of the Earth in km\n    const dLat = ((p2.lat - p1.lat) * Math.PI) / 180;\n    const dLon = ((p2.lng - p1.lng) * Math.PI) / 180;\n    const sinDLat = Math.sin(dLat / 2);\n    const sinDLon = Math.sin(dLon / 2);\n    const a = sinDLat * sinDLat +\n        Math.cos((p1.lat * Math.PI) / 180) *\n            Math.cos((p2.lat * Math.PI) / 180) *\n            sinDLon *\n            sinDLon;\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n};\n/**\n * Converts a LatLng bound to pixels.\n *\n * @hidden\n */\nconst latLngBoundsToPixelBounds = (bounds, projection) => {\n    return {\n        northEast: projection.fromLatLngToDivPixel(bounds.getNorthEast()),\n        southWest: projection.fromLatLngToDivPixel(bounds.getSouthWest()),\n    };\n};\n/**\n * Extends a pixel bounds by numPixels in all directions.\n *\n * @hidden\n */\nexport const extendPixelBounds = ({ northEast, southWest }, numPixels) => {\n    northEast.x += numPixels;\n    northEast.y -= numPixels;\n    southWest.x -= numPixels;\n    southWest.y += numPixels;\n    return { northEast, southWest };\n};\n/**\n * @hidden\n */\nexport const pixelBoundsToLatLngBounds = ({ northEast, southWest }, projection) => {\n    const sw = projection.fromDivPixelToLatLng(southWest);\n    const ne = projection.fromDivPixelToLatLng(northEast);\n    return new google.maps.LatLngBounds(sw, ne);\n};\n//# sourceMappingURL=utils.js.map","/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __rest } from \"tslib\";\nimport { Cluster } from \"../cluster\";\nimport { filterMarkersToPaddedViewport } from \"./utils\";\nimport { MarkerUtils } from \"../marker-utils\";\n/**\n * @hidden\n */\nexport class AbstractAlgorithm {\n    constructor({ maxZoom = 16 }) {\n        this.maxZoom = maxZoom;\n    }\n    /**\n     * Helper function to bypass clustering based upon some map state such as\n     * zoom, number of markers, etc.\n     *\n     * ```typescript\n     *  cluster({markers, map}: AlgorithmInput): Cluster[] {\n     *    if (shouldBypassClustering(map)) {\n     *      return this.noop({markers})\n     *    }\n     * }\n     * ```\n     */\n    noop({ markers, }) {\n        return noop(markers);\n    }\n}\n/**\n * Abstract viewport algorithm proves a class to filter markers by a padded\n * viewport. This is a common optimization.\n *\n * @hidden\n */\nexport class AbstractViewportAlgorithm extends AbstractAlgorithm {\n    constructor(_a) {\n        var { viewportPadding = 60 } = _a, options = __rest(_a, [\"viewportPadding\"]);\n        super(options);\n        this.viewportPadding = 60;\n        this.viewportPadding = viewportPadding;\n    }\n    calculate({ markers, map, mapCanvasProjection, }) {\n        if (map.getZoom() >= this.maxZoom) {\n            return {\n                clusters: this.noop({\n                    markers,\n                }),\n                changed: false,\n            };\n        }\n        return {\n            clusters: this.cluster({\n                markers: filterMarkersToPaddedViewport(map, mapCanvasProjection, markers, this.viewportPadding),\n                map,\n                mapCanvasProjection,\n            }),\n        };\n    }\n}\n/**\n * @hidden\n */\nexport const noop = (markers) => {\n    const clusters = markers.map((marker) => new Cluster({\n        position: MarkerUtils.getPosition(marker),\n        markers: [marker],\n    }));\n    return clusters;\n};\n//# sourceMappingURL=core.js.map","/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __rest } from \"tslib\";\nimport { AbstractViewportAlgorithm, } from \"./core\";\nimport { distanceBetweenPoints, extendBoundsToPaddedViewport, filterMarkersToPaddedViewport, } from \"./utils\";\nimport { Cluster } from \"../cluster\";\nimport equal from \"fast-deep-equal\";\nimport { MarkerUtils } from \"../marker-utils\";\n/**\n * The default Grid algorithm historically used in Google Maps marker\n * clustering.\n *\n * The Grid algorithm does not implement caching and markers may flash as the\n * viewport changes. Instead use {@link SuperClusterAlgorithm}.\n */\nexport class GridAlgorithm extends AbstractViewportAlgorithm {\n    constructor(_a) {\n        var { maxDistance = 40000, gridSize = 40 } = _a, options = __rest(_a, [\"maxDistance\", \"gridSize\"]);\n        super(options);\n        this.clusters = [];\n        this.state = { zoom: -1 };\n        this.maxDistance = maxDistance;\n        this.gridSize = gridSize;\n    }\n    calculate({ markers, map, mapCanvasProjection, }) {\n        const state = { zoom: map.getZoom() };\n        let changed = false;\n        if (this.state.zoom >= this.maxZoom && state.zoom >= this.maxZoom) {\n            // still at or beyond maxZoom, no change\n        }\n        else {\n            changed = !equal(this.state, state);\n        }\n        this.state = state;\n        if (map.getZoom() >= this.maxZoom) {\n            return {\n                clusters: this.noop({\n                    markers,\n                }),\n                changed,\n            };\n        }\n        return {\n            clusters: this.cluster({\n                markers: filterMarkersToPaddedViewport(map, mapCanvasProjection, markers, this.viewportPadding),\n                map,\n                mapCanvasProjection,\n            }),\n        };\n    }\n    cluster({ markers, map, mapCanvasProjection, }) {\n        this.clusters = [];\n        markers.forEach((marker) => {\n            this.addToClosestCluster(marker, map, mapCanvasProjection);\n        });\n        return this.clusters;\n    }\n    addToClosestCluster(marker, map, projection) {\n        let maxDistance = this.maxDistance; // Some large number\n        let cluster = null;\n        for (let i = 0; i < this.clusters.length; i++) {\n            const candidate = this.clusters[i];\n            const distance = distanceBetweenPoints(candidate.bounds.getCenter().toJSON(), MarkerUtils.getPosition(marker).toJSON());\n            if (distance < maxDistance) {\n                maxDistance = distance;\n                cluster = candidate;\n            }\n        }\n        if (cluster &&\n            extendBoundsToPaddedViewport(cluster.bounds, projection, this.gridSize).contains(MarkerUtils.getPosition(marker))) {\n            cluster.push(marker);\n        }\n        else {\n            const cluster = new Cluster({ markers: [marker] });\n            this.clusters.push(cluster);\n        }\n    }\n}\n//# sourceMappingURL=grid.js.map","/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __rest } from \"tslib\";\nimport { AbstractAlgorithm, } from \"./core\";\n/**\n * Noop algorithm does not generate any clusters or filter markers by the an extended viewport.\n */\nexport class NoopAlgorithm extends AbstractAlgorithm {\n    constructor(_a) {\n        var options = __rest(_a, []);\n        super(options);\n    }\n    calculate({ markers, map, mapCanvasProjection, }) {\n        return {\n            clusters: this.cluster({ markers, map, mapCanvasProjection }),\n            changed: false,\n        };\n    }\n    cluster(input) {\n        return this.noop(input);\n    }\n}\n//# sourceMappingURL=noop.js.map","/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __rest } from \"tslib\";\nimport { AbstractAlgorithm } from \"./core\";\nimport SuperCluster from \"supercluster\";\nimport { MarkerUtils } from \"../marker-utils\";\nimport { Cluster } from \"../cluster\";\nimport equal from \"fast-deep-equal\";\n/**\n * A very fast JavaScript algorithm for geospatial point clustering using KD trees.\n *\n * @see https://www.npmjs.com/package/supercluster for more information on options.\n */\nexport class SuperClusterAlgorithm extends AbstractAlgorithm {\n    constructor(_a) {\n        var { maxZoom, radius = 60 } = _a, options = __rest(_a, [\"maxZoom\", \"radius\"]);\n        super({ maxZoom });\n        this.state = { zoom: -1 };\n        this.superCluster = new SuperCluster(Object.assign({ maxZoom: this.maxZoom, radius }, options));\n    }\n    calculate(input) {\n        let changed = false;\n        const state = { zoom: input.map.getZoom() };\n        if (!equal(input.markers, this.markers)) {\n            changed = true;\n            // TODO use proxy to avoid copy?\n            this.markers = [...input.markers];\n            const points = this.markers.map((marker) => {\n                const position = MarkerUtils.getPosition(marker);\n                const coordinates = [position.lng(), position.lat()];\n                return {\n                    type: \"Feature\",\n                    geometry: {\n                        type: \"Point\",\n                        coordinates,\n                    },\n                    properties: { marker },\n                };\n            });\n            this.superCluster.load(points);\n        }\n        if (!changed) {\n            if (this.state.zoom <= this.maxZoom || state.zoom <= this.maxZoom) {\n                changed = !equal(this.state, state);\n            }\n        }\n        this.state = state;\n        if (changed) {\n            this.clusters = this.cluster(input);\n        }\n        return { clusters: this.clusters, changed };\n    }\n    cluster({ map }) {\n        return this.superCluster\n            .getClusters([-180, -90, 180, 90], Math.round(map.getZoom()))\n            .map((feature) => this.transformCluster(feature));\n    }\n    transformCluster({ geometry: { coordinates: [lng, lat], }, properties, }) {\n        if (properties.cluster) {\n            return new Cluster({\n                markers: this.superCluster\n                    .getLeaves(properties.cluster_id, Infinity)\n                    .map((leaf) => leaf.properties.marker),\n                position: { lat, lng },\n            });\n        }\n        const marker = properties.marker;\n        return new Cluster({\n            markers: [marker],\n            position: MarkerUtils.getPosition(marker),\n        });\n    }\n}\n//# sourceMappingURL=supercluster.js.map","/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __rest } from \"tslib\";\nimport { AbstractViewportAlgorithm, } from \"./core\";\nimport SuperCluster from \"supercluster\";\nimport { MarkerUtils } from \"../marker-utils\";\nimport { Cluster } from \"../cluster\";\nimport { getPaddedViewport } from \"./utils\";\nimport equal from \"fast-deep-equal\";\n/**\n * A very fast JavaScript algorithm for geospatial point clustering using KD trees.\n *\n * @see https://www.npmjs.com/package/supercluster for more information on options.\n */\nexport class SuperClusterViewportAlgorithm extends AbstractViewportAlgorithm {\n    constructor(_a) {\n        var { maxZoom, radius = 60, viewportPadding = 60 } = _a, options = __rest(_a, [\"maxZoom\", \"radius\", \"viewportPadding\"]);\n        super({ maxZoom, viewportPadding });\n        this.superCluster = new SuperCluster(Object.assign({ maxZoom: this.maxZoom, radius }, options));\n        this.state = { zoom: -1, view: [0, 0, 0, 0] };\n    }\n    calculate(input) {\n        const state = {\n            zoom: Math.round(input.map.getZoom()),\n            view: getPaddedViewport(input.map.getBounds(), input.mapCanvasProjection, this.viewportPadding),\n        };\n        let changed = !equal(this.state, state);\n        if (!equal(input.markers, this.markers)) {\n            changed = true;\n            // TODO use proxy to avoid copy?\n            this.markers = [...input.markers];\n            const points = this.markers.map((marker) => {\n                const position = MarkerUtils.getPosition(marker);\n                const coordinates = [position.lng(), position.lat()];\n                return {\n                    type: \"Feature\",\n                    geometry: {\n                        type: \"Point\",\n                        coordinates,\n                    },\n                    properties: { marker },\n                };\n            });\n            this.superCluster.load(points);\n        }\n        if (changed) {\n            this.clusters = this.cluster(input);\n            this.state = state;\n        }\n        return { clusters: this.clusters, changed };\n    }\n    cluster({ map, mapCanvasProjection }) {\n        /* recalculate new state because we can't use the cached version. */\n        const state = {\n            zoom: Math.round(map.getZoom()),\n            view: getPaddedViewport(map.getBounds(), mapCanvasProjection, this.viewportPadding),\n        };\n        return this.superCluster\n            .getClusters(state.view, state.zoom)\n            .map((feature) => this.transformCluster(feature));\n    }\n    transformCluster({ geometry: { coordinates: [lng, lat], }, properties, }) {\n        if (properties.cluster) {\n            return new Cluster({\n                markers: this.superCluster\n                    .getLeaves(properties.cluster_id, Infinity)\n                    .map((leaf) => leaf.properties.marker),\n                position: { lat, lng },\n            });\n        }\n        const marker = properties.marker;\n        return new Cluster({\n            markers: [marker],\n            position: MarkerUtils.getPosition(marker),\n        });\n    }\n}\n//# sourceMappingURL=superviewport.js.map","/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { MarkerUtils } from \"./marker-utils\";\n/**\n * Provides statistics on all clusters in the current render cycle for use in {@link Renderer.render}.\n */\nexport class ClusterStats {\n    constructor(markers, clusters) {\n        this.markers = { sum: markers.length };\n        const clusterMarkerCounts = clusters.map((a) => a.count);\n        const clusterMarkerSum = clusterMarkerCounts.reduce((a, b) => a + b, 0);\n        this.clusters = {\n            count: clusters.length,\n            markers: {\n                mean: clusterMarkerSum / clusters.length,\n                sum: clusterMarkerSum,\n                min: Math.min(...clusterMarkerCounts),\n                max: Math.max(...clusterMarkerCounts),\n            },\n        };\n    }\n}\nexport class DefaultRenderer {\n    /**\n     * The default render function for the library used by {@link MarkerClusterer}.\n     *\n     * Currently set to use the following:\n     *\n     * ```typescript\n     * // change color if this cluster has more markers than the mean cluster\n     * const color =\n     *   count > Math.max(10, stats.clusters.markers.mean)\n     *     ? \"#ff0000\"\n     *     : \"#0000ff\";\n     *\n     * // create svg url with fill color\n     * const svg = window.btoa(`\n     * <svg fill=\"${color}\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 240 240\">\n     *   <circle cx=\"120\" cy=\"120\" opacity=\".6\" r=\"70\" />\n     *   <circle cx=\"120\" cy=\"120\" opacity=\".3\" r=\"90\" />\n     *   <circle cx=\"120\" cy=\"120\" opacity=\".2\" r=\"110\" />\n     *   <circle cx=\"120\" cy=\"120\" opacity=\".1\" r=\"130\" />\n     * </svg>`);\n     *\n     * // create marker using svg icon\n     * return new google.maps.Marker({\n     *   position,\n     *   icon: {\n     *     url: `data:image/svg+xml;base64,${svg}`,\n     *     scaledSize: new google.maps.Size(45, 45),\n     *   },\n     *   label: {\n     *     text: String(count),\n     *     color: \"rgba(255,255,255,0.9)\",\n     *     fontSize: \"12px\",\n     *   },\n     *   // adjust zIndex to be above other markers\n     *   zIndex: 1000 + count,\n     * });\n     * ```\n     */\n    render({ count, position }, stats, map) {\n        // change color if this cluster has more markers than the mean cluster\n        const color = count > Math.max(10, stats.clusters.markers.mean) ? \"#ff0000\" : \"#0000ff\";\n        // create svg literal with fill color\n        const svg = `<svg fill=\"${color}\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 240 240\" width=\"50\" height=\"50\">\n<circle cx=\"120\" cy=\"120\" opacity=\".6\" r=\"70\" />\n<circle cx=\"120\" cy=\"120\" opacity=\".3\" r=\"90\" />\n<circle cx=\"120\" cy=\"120\" opacity=\".2\" r=\"110\" />\n<text x=\"50%\" y=\"50%\" style=\"fill:#fff\" text-anchor=\"middle\" font-size=\"50\" dominant-baseline=\"middle\" font-family=\"roboto,arial,sans-serif\">${count}</text>\n</svg>`;\n        const title = `Cluster of ${count} markers`, \n        // adjust zIndex to be above other markers\n        zIndex = Number(google.maps.Marker.MAX_ZINDEX) + count;\n        if (MarkerUtils.isAdvancedMarkerAvailable(map)) {\n            // create cluster SVG element\n            const parser = new DOMParser();\n            const svgEl = parser.parseFromString(svg, \"image/svg+xml\").documentElement;\n            svgEl.setAttribute(\"transform\", \"translate(0 25)\");\n            const clusterOptions = {\n                map,\n                position,\n                zIndex,\n                title,\n                content: svgEl,\n            };\n            return new google.maps.marker.AdvancedMarkerElement(clusterOptions);\n        }\n        const clusterOptions = {\n            position,\n            zIndex,\n            title,\n            icon: {\n                url: `data:image/svg+xml;base64,${btoa(svg)}`,\n                anchor: new google.maps.Point(25, 25),\n            },\n        };\n        return new google.maps.Marker(clusterOptions);\n    }\n}\n//# sourceMappingURL=renderer.js.map","/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Extends an object's prototype by another's.\n *\n * @param type1 The Type to be extended.\n * @param type2 The Type to extend with.\n * @ignore\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction extend(type1, type2) {\n    /* istanbul ignore next */\n    // eslint-disable-next-line prefer-const\n    for (let property in type2.prototype) {\n        type1.prototype[property] = type2.prototype[property];\n    }\n}\n/**\n * @ignore\n */\nexport class OverlayViewSafe {\n    constructor() {\n        // MarkerClusterer implements google.maps.OverlayView interface. We use the\n        // extend function to extend MarkerClusterer with google.maps.OverlayView\n        // because it might not always be available when the code is defined so we\n        // look for it at the last possible moment. If it doesn't exist now then\n        // there is no point going ahead :)\n        extend(OverlayViewSafe, google.maps.OverlayView);\n    }\n}\n//# sourceMappingURL=overlay-view-safe.js.map","/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SuperClusterAlgorithm, } from \"./algorithms\";\nimport { ClusterStats, DefaultRenderer } from \"./renderer\";\nimport { OverlayViewSafe } from \"./overlay-view-safe\";\nimport { MarkerUtils } from \"./marker-utils\";\nexport var MarkerClustererEvents;\n(function (MarkerClustererEvents) {\n    MarkerClustererEvents[\"CLUSTERING_BEGIN\"] = \"clusteringbegin\";\n    MarkerClustererEvents[\"CLUSTERING_END\"] = \"clusteringend\";\n    MarkerClustererEvents[\"CLUSTER_CLICK\"] = \"click\";\n})(MarkerClustererEvents || (MarkerClustererEvents = {}));\nexport const defaultOnClusterClickHandler = (_, cluster, map) => {\n    map.fitBounds(cluster.bounds);\n};\n/**\n * MarkerClusterer creates and manages per-zoom-level clusters for large amounts\n * of markers. See {@link MarkerClustererOptions} for more details.\n *\n */\nexport class MarkerClusterer extends OverlayViewSafe {\n    constructor({ map, markers = [], algorithmOptions = {}, algorithm = new SuperClusterAlgorithm(algorithmOptions), renderer = new DefaultRenderer(), onClusterClick = defaultOnClusterClickHandler, }) {\n        super();\n        this.markers = [...markers];\n        this.clusters = [];\n        this.algorithm = algorithm;\n        this.renderer = renderer;\n        this.onClusterClick = onClusterClick;\n        if (map) {\n            this.setMap(map);\n        }\n    }\n    addMarker(marker, noDraw) {\n        if (this.markers.includes(marker)) {\n            return;\n        }\n        this.markers.push(marker);\n        if (!noDraw) {\n            this.render();\n        }\n    }\n    addMarkers(markers, noDraw) {\n        markers.forEach((marker) => {\n            this.addMarker(marker, true);\n        });\n        if (!noDraw) {\n            this.render();\n        }\n    }\n    removeMarker(marker, noDraw) {\n        const index = this.markers.indexOf(marker);\n        if (index === -1) {\n            // Marker is not in our list of markers, so do nothing:\n            return false;\n        }\n        MarkerUtils.setMap(marker, null);\n        this.markers.splice(index, 1); // Remove the marker from the list of managed markers\n        if (!noDraw) {\n            this.render();\n        }\n        return true;\n    }\n    removeMarkers(markers, noDraw) {\n        let removed = false;\n        markers.forEach((marker) => {\n            removed = this.removeMarker(marker, true) || removed;\n        });\n        if (removed && !noDraw) {\n            this.render();\n        }\n        return removed;\n    }\n    clearMarkers(noDraw) {\n        this.markers.length = 0;\n        if (!noDraw) {\n            this.render();\n        }\n    }\n    /**\n     * Recalculates and draws all the marker clusters.\n     */\n    render() {\n        const map = this.getMap();\n        if (map instanceof google.maps.Map && map.getProjection()) {\n            google.maps.event.trigger(this, MarkerClustererEvents.CLUSTERING_BEGIN, this);\n            const { clusters, changed } = this.algorithm.calculate({\n                markers: this.markers,\n                map,\n                mapCanvasProjection: this.getProjection(),\n            });\n            // Allow algorithms to return flag on whether the clusters/markers have changed.\n            if (changed || changed == undefined) {\n                // Accumulate the markers of the clusters composed of a single marker.\n                // Those clusters directly use the marker.\n                // Clusters with more than one markers use a group marker generated by a renderer.\n                const singleMarker = new Set();\n                for (const cluster of clusters) {\n                    if (cluster.markers.length == 1) {\n                        singleMarker.add(cluster.markers[0]);\n                    }\n                }\n                const groupMarkers = [];\n                // Iterate the clusters that are currently rendered.\n                for (const cluster of this.clusters) {\n                    if (cluster.marker == null) {\n                        continue;\n                    }\n                    if (cluster.markers.length == 1) {\n                        if (!singleMarker.has(cluster.marker)) {\n                            // The marker:\n                            // - was previously rendered because it is from a cluster with 1 marker,\n                            // - should no more be rendered as it is not in singleMarker.\n                            MarkerUtils.setMap(cluster.marker, null);\n                        }\n                    }\n                    else {\n                        // Delay the removal of old group markers to avoid flickering.\n                        groupMarkers.push(cluster.marker);\n                    }\n                }\n                this.clusters = clusters;\n                this.renderClusters();\n                // Delayed removal of the markers of the former groups.\n                requestAnimationFrame(() => groupMarkers.forEach((marker) => MarkerUtils.setMap(marker, null)));\n            }\n            google.maps.event.trigger(this, MarkerClustererEvents.CLUSTERING_END, this);\n        }\n    }\n    onAdd() {\n        this.idleListener = this.getMap().addListener(\"idle\", this.render.bind(this));\n        this.render();\n    }\n    onRemove() {\n        google.maps.event.removeListener(this.idleListener);\n        this.reset();\n    }\n    reset() {\n        this.markers.forEach((marker) => MarkerUtils.setMap(marker, null));\n        this.clusters.forEach((cluster) => cluster.delete());\n        this.clusters = [];\n    }\n    renderClusters() {\n        // Generate stats to pass to renderers.\n        const stats = new ClusterStats(this.markers, this.clusters);\n        const map = this.getMap();\n        this.clusters.forEach((cluster) => {\n            if (cluster.markers.length === 1) {\n                cluster.marker = cluster.markers[0];\n            }\n            else {\n                // Generate the marker to represent the group.\n                cluster.marker = this.renderer.render(cluster, stats, map);\n                // Make sure all individual markers are removed from the map.\n                cluster.markers.forEach((marker) => MarkerUtils.setMap(marker, null));\n                if (this.onClusterClick) {\n                    cluster.marker.addListener(\"click\", \n                    /* istanbul ignore next */\n                    (event) => {\n                        google.maps.event.trigger(this, MarkerClustererEvents.CLUSTER_CLICK, cluster);\n                        this.onClusterClick(event, cluster, map);\n                    });\n                }\n            }\n            MarkerUtils.setMap(cluster.marker, map);\n        });\n    }\n}\n//# sourceMappingURL=markerclusterer.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}