{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pradeep yadav\\\\Downloads\\\\jobzilla\\\\TF-jobzilla\\\\jobzilla-react\\\\src\\\\app\\\\pannels\\\\public-user\\\\sections\\\\jobs\\\\section-jobs-grid.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport JobZImage from \"../../../../common/jobz-img\";\nimport { NavLink } from \"react-router-dom\";\nimport SectionPagination from \"../common/section-pagination\";\nimport { publicUser } from \"../../../../../globals/route-names\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction SectionJobsGrid() {\n  _s();\n  const [jobs, setJobs] = useState([]);\n  useEffect(() => {\n    fetch(\"http://localhost:8080/post-job\").then(response => response.json()).then(data => setJobs(data)).catch(error => console.error(\"Error fetching jobs:\", error));\n  }, []);\n  function getDateDifference(startDate) {\n    if (!startDate || typeof startDate !== \"string\") {\n      console.error(\"Invalid or missing start date:\", startDate);\n      return {\n        diffDays: 0,\n        diffMonths: 0\n      }; // Return default values if invalid date\n    }\n\n    const now = new Date();\n    const dateParts = startDate.split(\"/\");\n    if (dateParts.length === 3) {\n      const formattedStartDate = `${dateParts[2]}-${dateParts[1]}-${dateParts[0]}`;\n      startDate = formattedStartDate;\n    }\n    const start = new Date(startDate);\n    if (isNaN(start)) {\n      console.error(\"Invalid start date format:\", startDate);\n      return {\n        diffDays: 0,\n        diffMonths: 0\n      }; // Return default values if invalid date\n    }\n\n    const diffTime = now - start;\n    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n    const diffMonths = Math.floor(diffTime / (1000 * 60 * 60 * 24 * 30));\n    return {\n      diffDays,\n      diffMonths\n    };\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: jobs.map((job, index) => {\n        const {\n          diffDays,\n          diffMonths\n        } = getDateDifference(job.postDate); // Assuming `postDate` is a field in your job data.\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-6 col-md-12 m-b30\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"twm-jobs-grid-style1\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"twm-media\",\n              children: /*#__PURE__*/_jsxDEV(JobZImage, {\n                src: job.image || \"images/default-job.jpg\",\n                alt: job.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"twm-job-post-duration\",\n              children: diffDays < 30 ? `${diffDays} days ago` : `${diffMonths} months ago`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `twm-jobs-category ${job.categoryColor || \"green\"}`,\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: `twm-bg-${job.categoryColor || \"green\"}`,\n                children: job.category || \"Category\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"twm-mid-content\",\n              children: [/*#__PURE__*/_jsxDEV(NavLink, {\n                to: `${publicUser.jobs.DETAIL}/${job.id}`,\n                className: \"twm-job-title\",\n                children: /*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: job.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 68,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"twm-job-address\",\n                children: job.location\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n                href: job.website,\n                className: \"twm-job-websites site-text-primary\",\n                children: job.website\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"twm-right-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"twm-jobs-amount\",\n                children: [job.salary, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [\"/ \", job.paymentType || \"Month\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 77,\n                  columnNumber: 34\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(NavLink, {\n                to: `${publicUser.jobs.DETAIL}/${job.id}`,\n                className: \"twm-jobs-browse site-text-primary\",\n                children: \"Browse Job\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SectionPagination, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(SectionJobsGrid, \"Q0mbvptFv5mszAZqWDb/1cpBDtw=\");\n_c = SectionJobsGrid;\nexport default SectionJobsGrid;\nvar _c;\n$RefreshReg$(_c, \"SectionJobsGrid\");","map":{"version":3,"names":["React","useEffect","useState","JobZImage","NavLink","SectionPagination","publicUser","jsxDEV","_jsxDEV","Fragment","_Fragment","SectionJobsGrid","_s","jobs","setJobs","fetch","then","response","json","data","catch","error","console","getDateDifference","startDate","diffDays","diffMonths","now","Date","dateParts","split","length","formattedStartDate","start","isNaN","diffTime","Math","floor","children","className","map","job","index","postDate","src","image","alt","title","fileName","_jsxFileName","lineNumber","columnNumber","categoryColor","category","to","DETAIL","id","location","href","website","salary","paymentType","_c","$RefreshReg$"],"sources":["C:/Users/Pradeep yadav/Downloads/jobzilla/TF-jobzilla/jobzilla-react/src/app/pannels/public-user/sections/jobs/section-jobs-grid.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport JobZImage from \"../../../../common/jobz-img\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport SectionPagination from \"../common/section-pagination\";\r\nimport { publicUser } from \"../../../../../globals/route-names\";\r\n\r\nfunction SectionJobsGrid() {\r\n  const [jobs, setJobs] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"http://localhost:8080/post-job\")\r\n      .then((response) => response.json())\r\n      .then((data) => setJobs(data))\r\n      .catch((error) => console.error(\"Error fetching jobs:\", error));\r\n  }, []);\r\n\r\n  function getDateDifference(startDate) {\r\n    if (!startDate || typeof startDate !== \"string\") {\r\n      console.error(\"Invalid or missing start date:\", startDate);\r\n      return { diffDays: 0, diffMonths: 0 }; // Return default values if invalid date\r\n    }\r\n\r\n    const now = new Date();\r\n    const dateParts = startDate.split(\"/\");\r\n\r\n    if (dateParts.length === 3) {\r\n      const formattedStartDate = `${dateParts[2]}-${dateParts[1]}-${dateParts[0]}`;\r\n      startDate = formattedStartDate;\r\n    }\r\n\r\n    const start = new Date(startDate);\r\n\r\n    if (isNaN(start)) {\r\n      console.error(\"Invalid start date format:\", startDate);\r\n      return { diffDays: 0, diffMonths: 0 }; // Return default values if invalid date\r\n    }\r\n\r\n    const diffTime = now - start;\r\n    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\r\n    const diffMonths = Math.floor(diffTime / (1000 * 60 * 60 * 24 * 30));\r\n\r\n    return { diffDays, diffMonths };\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"row\">\r\n        {jobs.map((job, index) => {\r\n          const { diffDays, diffMonths } = getDateDifference(job.postDate); // Assuming `postDate` is a field in your job data.\r\n          return (\r\n            <div className=\"col-lg-6 col-md-12 m-b30\" key={index}>\r\n              <div className=\"twm-jobs-grid-style1\">\r\n                <div className=\"twm-media\">\r\n                  <JobZImage src={job.image || \"images/default-job.jpg\"} alt={job.title} />\r\n                </div>\r\n                <span className=\"twm-job-post-duration\">\r\n                  {diffDays < 30\r\n                    ? `${diffDays} days ago`\r\n                    : `${diffMonths} months ago`}\r\n                </span>\r\n                <div className={`twm-jobs-category ${job.categoryColor || \"green\"}`}>\r\n                  <span className={`twm-bg-${job.categoryColor || \"green\"}`}>\r\n                    {job.category || \"Category\"}\r\n                  </span>\r\n                </div>\r\n                <div className=\"twm-mid-content\">\r\n                  <NavLink to={`${publicUser.jobs.DETAIL}/${job.id}`} className=\"twm-job-title\">\r\n                    <h4>{job.title}</h4>\r\n                  </NavLink>\r\n                  <p className=\"twm-job-address\">{job.location}</p>\r\n                  <a href={job.website} className=\"twm-job-websites site-text-primary\">\r\n                    {job.website}\r\n                  </a>\r\n                </div>\r\n                <div className=\"twm-right-content\">\r\n                  <div className=\"twm-jobs-amount\">\r\n                    {job.salary} <span>/ {job.paymentType || \"Month\"}</span>\r\n                  </div>\r\n                  <NavLink to={`${publicUser.jobs.DETAIL}/${job.id}`} className=\"twm-jobs-browse site-text-primary\">\r\n                    Browse Job\r\n                  </NavLink>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <SectionPagination />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SectionJobsGrid;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}